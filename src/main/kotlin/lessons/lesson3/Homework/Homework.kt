//package lessons.lesson3.Homework
//import java.time.LocalDate
//import java.time.chrono.ChronoLocalDate
//import java.time.temporal.ChronoUnit
//import java.time.temporal.Temporal
//
////Название мероприятия
////публичная переменная, известная на момент написания и не изменяемая в будущем
//val eventName: String = "Hackathon Survival"
//
////Дата проведения
////публичная переменная, известная на момент написания, но дата ивента может переноситься
//var eventDate: Temporal? = LocalDate.of(2025, 9, 30)
//
////Место проведения
////публичная переменная, известная на момент написания, но место проведения может измениться
//var eventLocation: String = "БЦ \"Олимп\""
//
////Подробный бюджет мероприятия, включая расходы на оборудование, кейтеринг и другие операционные расходы
////данные о бюджете — приватная информация компании. Расходы заложены и запланированы, не будут меняться
////Данных должно быть очень много, тут бы подошел тип object, но раз мы его не проходили, то будет String
//private val eventBudgetDetails: String = "Шторы: 100р, столы: 200р"
//
////Количество участников
////публичная переменная, количество постоянно меняется: новые регистрируются, кто-то может "отвалиться".
//var eventParticipantsCount: Int = 100
//
////Длительность хакатона
////публичная переменная, известная на момент написания, не может изменяться
//val eventDurationDays: Int = 3
//
////Контактная информация и условия соглашений с поставщиками пищи, оборудования и других услуг.
////приватная информация, после согласования условий они не будут изменяться.
////Поставщики будут известны позже, поэтому переменная не может быть проинициализирована на момент написания
////Данных должно быть очень много, тут бы подошел тип object, но раз мы его не проходили, то будет String
//private lateinit var eventVendorsAgreements: String
//
////Текущее состояние хакатона (статус)
////публичная переменная, значение которой строго зависит от количества дней до начала мероприятия
//val eventCurrentStatus: String
//    get() {
//        val today = LocalDate.now()
//        val daysToStart = ChronoUnit.DAYS.between(today, eventDate)
//        val endEvent: LocalDate? = (eventDate as? LocalDate)
//            ?.plusDays((eventDurationDays - 1).toLong())
//        return when {
//            today.isAfter(endEvent) -> "finished"
//            (today.isEqual(eventDate as ChronoLocalDate?) || (today.isAfter(eventDate as ChronoLocalDate?) && !today.isAfter(endEvent))) -> "running"
//            daysToStart in 1..7 -> "upcoming"
//            daysToStart > 7 -> "planning"
//            else -> "upcoming"
//        }
//    }
//
////Список спонсоров
////публичная информация, заранее известная на момент написания. Список спонсоров изменяться
//var eventSponsorsList: MutableList<String> = mutableListOf("sponsor1", "sponsor2", "sponsor3")
//
////Бюджет мероприятия
////бюджет компании — приватная информация. Бюджет заложен и не может изменяться
//private val eventBudget: Double = 1000.50
//
////Текущий уровень доступа к интернету
////доступ в интернет может быть заблокирован, может быть ограничен, может быть не ограничен
////Это общедоступное значение, которое может измениться в зависимости от желаний организатора
////например, организатор может начать ивент со статуса "blocked", чтобы у участников не было интернета
//lateinit var internetAccessLevel: String
//
////Информация о транспортировке оборудования, распределении ресурсов и координации между различными командами поддержки.
////еще не понятно, кто выйдет на работу в тот день. Информация приватная, может изменяться
//lateinit private var resourceCoordinationInfo: String
//
////Количество команд
////публичная информция, на момент написания точное количество команд-участников не известно, может меняться
//var eventTeamsCount: Int = 5
//
////Перечень задач
////публичная иоформация, известная на момент написания.
////не может изменяться по количеству, но содержание задачи должно быть изменяемым, а то вдруг ошибка проскочит.
//val tasksList: List<String> = listOf("task1", "task2")
//
////План эвакуации
////публичная информация, не может изменяться, известна на момент написания
//val evacuationPlan: String = "команда 1 в дверь №1, команда 2 в дверь №2"
//
////Список доступного оборудования (всё, что выделено для использования на мероприятии)
////публичная информация, не может изменяться, известна на момент написания
//val availableEquipmentList: String= "\"PC: параметры\", \"Ноутбук: марка, параметры\""
//
////Список свободного оборудования (всё, что можно взять прямо сейчас и что не занято другими участниками)
////публичная информация, не известная на момент написания, может изменяться
//lateinit var currentAvailableEquipmentList: String
//
////График питания участников (зависит от поставщика питания, определяемого за неделю до начала)
//// публичная информация, будет изменяться, не известна на момент написания
//lateinit var dailyMealSchedule: String
//
////План мероприятий на случай сбоев
////приватная информация, известная заранее, поэтому не будет меняться
//val incidentResponsePlan: String = "plan1, plan 2"
//
////Список экспертов и жюри
////открытая и известная заранее информация. Теоретически может измениться, если кто-то заболеет
//var expertsList: String = "expert 1, expert 2"
//
////Политика конфиденциальности
////публичная информация, известная заранее, не изменяется
//val confidencialPolicy: String = "text"
//
////Приватные отзывы (фидбэк) участников и зрителей для анализа проблем.
////отзывы приватные, на момент написания не известны, будут изменяться
//private lateinit var privateReview: String
//
////Текущая температура в помещении
////текуща температура не известна на момент написания, будет изменяться, общедоступная
//lateinit var currentTemperatureCelsius: String
//
////Данные мониторинга и анализ производительности сетевого оборудования и интернет-соединения для целей отладки своих приложений командами
//// это приватная информация, будет изменяться, не известна на момент написания
//private lateinit var monitoringSystemData: String
//
////Регулятор скорости интернета (понижающий коэффициент, например 0.5)
////приватная информация, изменится на мероприятии, но стартовый коэффициент задан
//private var internetSpeedCoefficient: Double = 0.5
//
////Уровень освещения
////регулируемый приватный параметр, будет изменяться, но стартовое значение задано
//private var lightLevel: Double = 1.5
//
////Лог событий мероприятия
//// изменяемый приватный параметр, не известен на момент написания
//private lateinit var eventLogs: String
//
////Возможность получения медицинской помощи прямо на мероприятии (да/нет)
////известный приватный параметр, не будет изменяться
//private val hasEmergency: Boolean = true
//
////Планы и процедуры для обеспечения безопасности мероприятия, включая планы эвакуации и протоколы чрезвычайных ситуаций.
//// приватная информация, не будет изменяться, известна на момент написания
//private val securityProcedures: String = "text"
//
////Регистрационный номер мероприятия
////публичная информация, известна на момент начала, не будет изменяться
//val eventRegNumber: String = "A45IT-05"
//
////Максимально допустимый уровень шума в помещении хакатона.
////общеизвестная информация, ограниченная законодательно. Не будет изменяться
//val maxHzNoiseLevel: Double = 150.7
//
////Индикатор превышения уровня шума в помещениях (превышен или не превышен в данный момент)
////приватная информация. Возможно будет изменяться. На момент написания не известна, но стартовое значение есть
//private var isHzNoiseLevelOverMax:  Boolean = false
//
////План взаимодействия с прессой
////приватная информация. Не будет изменяться. Известна на момент написания.
//private val pressContactPlan: String = ""
//
////Детальная публичная информация о проектах каждой команды, сбор данных включает в себя компиляцию кода и сбор статистики прогона автоматизированных проверок.
////публичная информация, будет изменяться, неизвестна на момент написания
//lateinit var detailedInfoAboutTeamProject: String
//
////Статус получения всех необходимых разрешений для проведения мероприятия
////обыно приватная информация, текущий статус меняется, известен на момент написания
//private var currentEventPermissionsStatus: String = "finish"
//
////Индикатор доступности специализированного оборудования в данный момент (например, специальному оборудованию)
////приватная информация, неизвестна на момент начала, может изменяться. Начальное значение задано
//private var isSpecialEquipmentAvailable: Boolean = true
//
////Список партнеров мероприятия
////публичная информация, может изменяться, известен на момент написания
//var eventPartnersList: String = "\"Partner1\", \"Partner2\""
//
////Отчет, включающий фотографии, видео и отзывы, генерируется и становится доступен после завершения мероприятия.
////формируется один раз после окончания мероприятия, не известен на момент написания, публичный, не будет изменяться
//val eventReport: String by lazy {
//    "инициализация отчета"
//}
//
////Внутренние правила распределения призов
////приватная информация, известна заранее, не будет изменяться
//private val prizeSelectionRules: String = "text"
//
////Список разыгрываемых призов
////публичная информация, известна заранее, не будет изменяться
//val prizeList: String = "text"
//
////Контактная информация экстренных служб, медицинского персонала и других важных служб, для внутреннего пользования.
////приватная информация, известна заранее, не будет изменяться
//private val emergencyContacts: String = "text"
//
////Особые условия для участников с ограниченными возможностями
////публичная информация, известна заранее, не будет изменяться
//val accessibilityConditions: String = "text"
//
////Общее настроение участников (определяется опросами)
////приватная информация, станет известна после начала. Может изменяться
//private lateinit var eventParticipantsMood: String
//
////Подробный план хакатона, включающий время и содержание каждого сегмента, инициализируется непосредственно перед началом мероприятия, так как зависит от фактического состава команд и взятых в работу задач.
////обычно это публичная информация, известная непосредственно перед началом мероприятия, а не в момент написания. Изменяться не будет
//val detailedHackatonPlan: String by lazy {
//    "инициация плана в зависимости от разных факторов"
//}
//
////Имя знаменитого специального гостя, которое будет объявлено за день до мероприятия, но в момент инициализации неизвестно.
////приватная информация, не известная на момент написания, не будет изменяться
//private val eventSpecialGuest: String by lazy {
//    "имя гостя"
//}
//
////Максимальное количество людей, которое может вместить место проведения.
////публичная информация, зависит от места. Место может меняться, поэтому эта цифра тоже может измениться
//var placeCapacity: Int = 1000
//
////Количество часов, отведенное каждой команде для работы над проектом.
////фиксированное публичное значение, которое известно на момент написания и не будет изменяться
//val hoursPerTeamForProject: Double = 1.5